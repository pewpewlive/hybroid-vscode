{
  "scopeName": "scope.hybroid",
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Livecode",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#single_strings" },
    { "include": "#double_strings" },
    { "include": "#single_comments" },
    { "include": "#block_comments" },
    { "include": "#variables" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.hybroid",
          "match": "\\b(if|else|while|for|repeat|tick|return|break|continue|in|with|to|as|spawn|enum|use|fn|trait|match|entity|class)\\b"
        },
        {
          "comment": "logical operators",
          "name": "keyword.operator.logical.hybroid",
          "match": "(or|and|not)(?!=)"
        },
        {
          "comment": "assignment operators",
          "name": "keyword.operator.assignment.hybroid",
          "match": "(\\+=|-=|\\*=|/=|%=|\\^=|\\|=)"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.hybroid",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "comparison operators",
          "name": "keyword.operator.comparison.hybroid",
          "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.math.hybroid",
          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
        }
      ]
    },
    "single_strings": {
      "name": "string.quoted.single.hybroid",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.hybroid",
          "match": "\\\\."
        }
      ]
    },
    "double_strings": {
      "name": "string.quoted.double.hybroid",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.hybroid",
          "match": "\\\\."
        }
      ]
    },
    "single_comments": {
      "name": "comment.line.double-slash.hybroid",
      "begin": "//",
      "end": "\n"
    },
    "block_comments": {
      "name": "comment.block.hybroid",
      "begin": "/\\*",
      "end": "\\*/"
    },
		"variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.other.hybroid",
					"match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!([Ss]elf)))?[a-z0-9_]+\\b"
				}
			]
		}
  }
}
